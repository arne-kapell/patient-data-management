name: Run tests and deploy to VPS

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  HOST: cloud.arne-kapell.de
  USERNAME: ${{ secrets.USERNAME }}
  PORT: ${{ secrets.PORT }}
  KEY: ${{ secrets.SSHKEY }}
  TARGET_PATH: "/repos/pdm/"
  COMPOSE_FILE: "docker-compose.prod.yml"

jobs:
  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  django-test-and-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install Dependencies and collect static files
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python manage.py collectstatic --noinput
      - name: Run Django Tests
        run: python manage.py test -v 2 --noinput &> $GITHUB_STEP_SUMMARY
  deploy:
    runs-on: ubuntu-latest
    needs: django-test-and-checks
    environment:
      name: vps
      url: "https://${{ env.HOST }}/"
    steps:
      - uses: actions/checkout@v1
      - name: Copy repository contents via scp
        uses: appleboy/scp-action@master
        env:
          HOST: ${{ env.HOST }}
          USERNAME: ${{ env.USERNAME }}
          PORT: ${{ env.PORT }}
          KEY: ${{ env.KEY }}
        with:
          source: "./*"
          target: ${{ env.TARGET_PATH }}
          overwrite: true
          rm: true

      - name: Executing remote command
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          USERNAME: ${{ env.USERNAME }}
          PORT: ${{ env.PORT }}
          KEY: ${{ env.SSHKEY }}
          script: |
            cd ${{ env.TARGET_PATH }}
            docker compose -f ${{ env.COMPOSE_FILE }} up -d --build --force-recreate --quiet-pull --remove-orphans > ACTION_DEPLOY.log
